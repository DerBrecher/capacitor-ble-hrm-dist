name: iOS (Capacitor) – Build Dev IPA
on:
  workflow_dispatch:
  push:
    branches: [ main ]

jobs:
  build-ios:
    runs-on: macos-14

    env:
      SCHEME: App
      WORKSPACE: App.xcworkspace
      CONFIGURATION: Release
      BUNDLE_ID: ${{ secrets.BUNDLE_ID }}
      APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Use Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install web deps & build
        run: |
          npm ci
          npm run build

      - name: Sync Capacitor iOS
        run: |
          npx cap sync ios

      # Pin the Xcode version on the runner
      - name: Select Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: latest-stable

      - name: Sanity check P12 + password
        shell: bash
        env:
          P12_BASE64: ${{ secrets.P12_BASE64 }}
          P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
        run: |
          echo "$P12_BASE64" | base64 -D > cert.p12   # macOS runner uses -D to decode
          /usr/bin/openssl pkcs12 -in cert.p12 -nokeys -passin pass:"$P12_PASSWORD" -info -noout

      # Import your Apple Development certificate into the build keychain
      - name: Import signing cert
        uses: apple-actions/import-codesign-certs@v5
        with:
          p12-file-base64: ${{ secrets.P12_BASE64 }}
          p12-password: ${{ secrets.P12_PASSWORD }}
          keychain-password: ${{ secrets.KEYCHAIN_PASSWORD }}

      - name: Write ASC API key (.p8)
        shell: bash
        env:
          APPSTORE_KEY_ID: ${{ secrets.APPSTORE_KEY_ID }}
          APPSTORE_PRIVATE_KEY: ${{ secrets.APPSTORE_PRIVATE_KEY }}
        run: |
          set -euo pipefail
          KEY_PATH="$RUNNER_TEMP/AuthKey_${APPSTORE_KEY_ID}.p8"
          # write the key, preserving newlines
          cat > "$KEY_PATH" <<P8
          $APPSTORE_PRIVATE_KEY
          P8
              chmod 600 "$KEY_PATH"
              echo "AUTH_KEY_PATH=$KEY_PATH" >> "$GITHUB_ENV"

      # Archive: SIGN during archive with the UUID (this embeds the profile)
      - name: Build archive (xcarchive)
        working-directory: ios/App
        run: |
          set -euxo pipefail
          BUILD_NUM="${GITHUB_RUN_NUMBER:-1}"
          xcodebuild \
            -workspace "App.xcworkspace" \
            -scheme "App" \
            -configuration "Release" \
            -archivePath "$PWD/build/App.xcarchive" \
            -sdk iphoneos \
            -destination 'generic/platform=iOS' \
            CODE_SIGNING_ALLOWED=YES \
            CODE_SIGN_STYLE=Automatic \
            DEVELOPMENT_TEAM="${APPLE_TEAM_ID}" \
            PRODUCT_BUNDLE_IDENTIFIER="${BUNDLE_ID}" \
            CURRENT_PROJECT_VERSION="${BUILD_NUM}" \
            MARKETING_VERSION="1.0.0" \
            -allowProvisioningUpdates \
            -authenticationKeyPath "$AUTH_KEY_PATH" \
            -authenticationKeyID "${{ secrets.APPSTORE_KEY_ID }}" \
            -authenticationKeyIssuerID "${{ secrets.APPSTORE_ISSUER_ID }}" \
            clean archive | tee xcodebuild.log

      # Create ExportOptions with modern method + UUID mapping
      - name: Create ExportOptions.plist
        working-directory: ios/App
        run: |
          cat > ExportOptions.plist <<PLIST
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0"><dict>
            <key>method</key><string>development</string>
            <key>signingStyle</key><string>automatic</string>
            <key>manageAppVersionAndBuildNumber</key><false/>
          </dict></plist>
          PLIST
          echo "== ExportOptions.plist =="; plutil -p ExportOptions.plist

      # Sanity checks (VERY helpful)
      - name: Show installed profiles + check embedded one in archive
        run: |
          PROFILE_DIR="$HOME/Library/MobileDevice/Provisioning Profiles"
          echo "Installed profiles:"; ls -la "$PROFILE_DIR" || true
          for f in "$PROFILE_DIR"/*.mobileprovision; do
            [ -e "$f" ] || continue
            security cms -D -i "$f" >/tmp/p.plist
            NAME=$(/usr/libexec/PlistBuddy -c 'Print :Name' /tmp/p.plist)
            UUID=$(/usr/libexec/PlistBuddy -c 'Print :UUID' /tmp/p.plist)
            APPID=$(/usr/libexec/PlistBuddy -c 'Print :Entitlements:application-identifier' /tmp/p.plist)
            echo "• $NAME | UUID=$UUID | APPID=$APPID"
          done
          INFO=ios/App/build/App.xcarchive/Info.plist
          TEAM=$(/usr/libexec/PlistBuddy -c 'Print :ApplicationProperties:Team' "$INFO")
          echo "Archive Team: $TEAM"
          APP_REL=$(/usr/libexec/PlistBuddy -c 'Print :ApplicationProperties:ApplicationPath' "$INFO")
          APP="ios/App/build/App.xcarchive/Products/Applications/${APP_REL##*/}"
          if [ -f "$APP/embedded.mobileprovision" ]; then
            echo "Archive contains embedded.mobileprovision ✅"
            security cms -D -i "$APP/embedded.mobileprovision" >/tmp/emb.plist
            echo "Embedded UUID:" $(/usr/libexec/PlistBuddy -c 'Print :UUID' /tmp/emb.plist)
            echo "Embedded APPID:" $(/usr/libexec/PlistBuddy -c 'Print :Entitlements:application-identifier' /tmp/emb.plist)
          else
            echo "No embedded.mobileprovision in archive ❌"
          fi


      - name: Export IPA
        working-directory: ios/App
        run: |
          xcodebuild -exportArchive \
            -archivePath "$PWD/build/$SCHEME.xcarchive" \
            -exportPath "$PWD/build/export" \
            -exportOptionsPlist ExportOptions.plist | xcpretty && exit ${PIPESTATUS[0]}
          ls -la "$PWD/build/export"

      - name: Upload IPA artifact
        uses: actions/upload-artifact@v4
        with:
          name: ios-dev-ipa
          path: ios/App/build/export/*.ipa

      # - name: Upload app to TestFlight
      #   uses: apple-actions/upload-testflight-build@v3
      #   with:
      #     app-path: ios/App/build/export/App.ipa
      #     issuer-id: ${{ secrets.APPSTORE_ISSUER_ID }}
      #     api-key-id: ${{ secrets.APPSTORE_KEY_ID }}
      #     api-private-key: ${{ secrets.APPSTORE_PRIVATE_KEY }}
